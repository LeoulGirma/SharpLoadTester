name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Publish Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        runtime: [linux-x64, win-x64, osx-x64, osx-arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\.nuget\\packages' || '~/.nuget/packages' }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build single file executable
        run: |
          dotnet publish ./SharpLoadTester.csproj -c Release -r ${{ matrix.runtime }} --self-contained true -p:PublishTrimmed=true -p:TrimMode=link -p:PublishSingleFile=true -o ./artifacts/${{ matrix.runtime }}

      - name: Create zip archive of binaries
        run: |
          zip -j "./artifacts/SharpLoadTester-${{ github.ref_name }}-${{ matrix.runtime }}.zip" ./artifacts/${{ matrix.runtime }}/*

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.runtime }}
          path: ./artifacts/SharpLoadTester-${{ github.ref_name }}-${{ matrix.runtime }}.zip

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create a new tag (if not provided)
        id: tag
        run: |
          if [ -z "${{ github.event.inputs.tag_name }}" ]; then
            export TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          else
            export TAG_NAME="${{ github.event.inputs.tag_name }}"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      - name: Push the new tag
        run: |
          git tag ${{ env.tag_name }}
          git push origin ${{ env.tag_name }}

      - name: Download all artifact ZIP files
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts/*.zip
          asset_name: SharpLoadTester.zip
          asset_content_type: application/zip
